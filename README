README

-------------------------------------------------------------------------------
Copyright 2015 John P. Maloney

Distributed under the Apache License, Version 2.0.
(See accompanying file LICENSE_2_0 or copy at
http://www.apache.org/licenses/LICENSE-2.0)
-------------------------------------------------------------------------------



===============================================================================
2015-03-07 Sun


Local computer:
o Ubuntu 14.10 64-bit
o Intel Core i7-4770 (Haswell)
o gcc/g++ 4.9.1


Install various Linux pages:

DebPackage              YumPackage
----------              ----------
Ubuntu only:
gnome-session-fallback
synaptic
debhelper

Virtual machine guest only:
dkms
build-essential

Development:
terminator
vim-gnome
tree
valgrind
subversion
mercurial
git-core
git-gui
git-doc
cvs
scons
gcc
g++
ddd
nemiver
clang (3.5)
lldb-3.5
cpuid
p7zip-full
meld
libbz2-dev
python-dev
libicu-dev
lib1g-dev
flex
(gtkmm-3.0-1 needed by who?)
libatomic-ops-dev
libelf-dev
a2ps
exuberant-ctags

Fonts:
console-terminus
ttf-dejavu
fonts-droid
fonts-inconsolata
xfonts-terminus

---

Install grin:
Reference: http://pypi.python.org/pypi/grin
$ sudo apt-get install python-setuptools
$ sudo easy_install grin

---

Revised instructions for GitHub setup

Git setup:
$ sudo apt-get install git-core git-gui git-doc
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@youremail.com"
;; Note: the following is for git 2.0 or later:
$ git config --global push.default simple

Configure git for GitHub:
$ git config --global github.user <github_username>

Configure GitHub for us:
Reference: https://help.github.com/articles/generating-ssh-keys
$ ssh-keygen -t rsa -C "your_email@youremail.com"
o  Enter your passphrase.  [Github recommends no passphrase.]

Add to local ssh-agent:
$ eval "$(ssh-agent -s)"
$ ssh-add ~/.ssh/id_rsa

Add to GitHub.com (see https://github.com/settings/ssh).
$ gvim ~/.ssh/id_rsa.pub
o  Select all & copy to clipboard.
o  On github.com, click "*" tool, click "SSH keys",
   click "Add SSH key", paste key, click "Add key".
o  $ ssh -T git@github.com     ;; Verify connection.

Clone our repo into directory ~/basic:
$ mkdir -p ~/third-party/jpmaloney; cd ~/third-party/jpmaloney
$ git clone https://github.com/jpmaloney/basic.git
;; Obsolete?: $ git clone git@github.com:jpmaloney/basic.git

Configure git to sync with the GitHub repo:
$ cd ~/third-party/jpmaloney/basic
$ git remote -v
$ git remote add upstream https://github.com/jpmaloney/basic.git
$ git remote -v    ;; Observe new 'upstream' repos.


---


Revised instructions for Boost 1.57.0 setup

Reference: 
http://www.boost.org/doc/libs/1_57_0/more/getting_started/unix-variants.html

Install some packages used by some Boost libraries:
Library             DebPackage
-------             ----------
bzip2               libbz2-dev
python-dev          python-dev
icu                 libicu-dev
zlib                lib1g-dev
$ sudo apt-get install libbz2-dev python-dev libicu-dev lib1g-dev

Download and extract the Boost archive:
$ mkdir p ~/third-party/boost/temp; cd ~/third-party/boost/temp
$ wget http://downloads.sourceforge.net/project/boost/boost/1.57.0/boost_1_57_0.7z
$ 7za x boost_1_57_0.7z

Build and install Boost.Build:
$ cd ~/third-party/boost/temp/boost_1_57_0/tools/build
$ ./booststrap.sh
;; Note: "-d+2" below means "show commands".
;; Note: Don't use "~" for home directory.
$ ./b2 install \
--prefix=${HOME}/third-party/boost/boost_build_1_57_0 
;; Append this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/third-party/boost/boost_build_1_57_0/bin
;; Update environment variables:
$ source ~/.bashrc
$ b2 --version        ;; Verify b2 is on PATH.

Build and install Boost:
$ cd ~/third-party/boost/temp/boost_1_57_0
$ ./bootstrap.sh --prefix=${HOME}/third-party/boost/boost_1_57_0
$ b2 -d+2 cxxflags=-std=c++14 toolset=gcc install \
--prefix=${HOME}/third-party/boost/boost_1_57_0













Scheme for supporting multiple versions of Boost and Boost.Build

Motivation:
* We want to choose one of several versions of Boost to use.
* We want to choose one of several versions of Boost.Build to use.
* We may want to mix and match versions of Boost and Boost.Build.

Directory structure:

;; Assume that our Boost stuff lives in this directory:
~/thirdparty/

;; We soft-link boost and boost_build to the desired versions
;; of Boost and Boost.Build.
;; The boost directory contains directories like boost, doc, libs, and tools.
;; The boost_build directory contains directories like ....
~/thirdparty/boost/ ->       ~/thirdparty/boost_versions/boost_1_40_0
~/thirdparty/boost_build/ -> ~/thirdparty/boost_versions/boost_1_40_0_boost_build

;; The concrete Boost and Boost.Build files live in this directory:
~/thirdparty/boost_versions/

;; For example:
~/thirdparty/boost_versions/boost_1_40_0/
~/thirdparty/boost_versions/boost_1_40_0_boost_build/
~/thirdparty/boost_versions/boost_1_49_0/
~/thirdparty/boost_versions/boost_1_49_0_boost_build/
~/thirdparty/boost_versions/boost_1_50_0/
~/thirdparty/boost_versions/boost_1_50_0_boost_build/

To change the preferred version of Boost:

To change the preferred version of Boost.Build:


---

Getting started with Boost 1.40.0 C++ libraries with G++ 4.7

Note: I am having problems getting Boost 1.40.0 and G++ 4.7 to work together.
If you have G++ 4.7, consider using a more recent version of Boost.

Install some packages:
Library               DebPackage
-------               ----------
bzip2                 libbz2-dev
python-dev            python-dev

Download the Boost C++ libraries:
$ cd ~
$ mkdir -p ~/thirdparty/boost_versions ; cd ~/thirdparty/boost_versions
$ wget http://downloads.sourceforge.net/project/boost/boost/1.40.0/boost_1_40_0.tar.bz2
$ tar -xvf boost_1_40_0.tar.bz2

Make a symbolic link to the Boost C++ libraries:
$ cd ~/thirdparty
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0 ~/thirdparty/boost

Verify that Boost header files are usable (after "git clone" above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example.cpp -o boost_example
$ echo 1 2 3 | ./boost_example

Build bjam:
;; This creates the file ~/thirdparty/boost_versions/boost_1_40_0/bjam.
$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ ./bootstrap.sh

Make a symbolic link to bjam:
$ cd ~/thirdparty/boost_versions
;; There is some fancy footwork to ensure that bjam can be found
;; in the directory ~/thirdparty/boost_build/bin.
$ mkdir -p boost_1_40_0_boost_build/bin
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0/bjam \
  ~/thirdparty/boost_versions/boost_1_40_0_boost_build/bin/bjam
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0_boost_build ~/thirdparty/boost_build

Add bjam to the PATH env var:
$ vim ~/.bashrc
;; Add this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/thirdparty/boost_build/bin
;; Reload .bashrc:
$ source ~/.bashrc

Setup Boost.Build:
$ cp ~/basic/user-config.jam.orig ~/user-config.jam
;; Tweak ~/user-config.jam as needed.

Apply patch to support G++ 4.7.
;; Reference: https://svn.boost.org/trac/boost/ticket/6165
;; Download the following patch in the "original format" to
;; the directory ~/thirdparty/boost_versions/boost_1_40_0:
;; https://svn.boost.org/trac/boost/attachment/ticket/6165/libstdcpp3.hpp.patch
$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ patch ./boost/config/stdlib/libstdcpp3.hpp ./libstdcpp3.hpp.patch

Build custom binaries:
;; Note: Must use ${HOME} rather than ~.
#$ cd ~/thirdparty/boost_versions/boost_1_40_0
#$ ./bjam install --prefix=${HOME}/thirdparty/boost_versions/boost_1_40_0_boost_build

$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ bjam toolset=gcc stage

Verify that Boost binary libraries are usable (after "git clone" and "bjam ..." above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example_lib.cpp -o boost_example_lib \
~/thirdparty/boost/stage/lib/libboost_regex.a
$ ./boost_example_lib


===============================================================================
2012-12-11 Tue


Install some packages:

Library               DebPackage
-------               ----------
                      scons
                      terminator   ;; Multiple GNOME terminals in one window.


===============================================================================
2012-12-06 Thu


Revised instructions for GitHub setup

Note: The following is no longer needed:
$ git config --global github.token <github_token> ;; Obsolete.

Git setup:
$ sudo apt-get install git-core git-gui git-doc
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@youremail.com"

Configure git for GitHub:
$ git config --global github.user <github_username>

Configure GitHub for us:
Reference: https://help.github.com/articles/generating-ssh-keys
$ ssh-keygen -t rsa -C "your_email@youremail.com"
o  Enter your passphrase.
o  Add to GitHub.com (see https://github.com/settings/ssh).
o  $ ssh-add

Clone our repo into directory ~/basic:
$ cd ~ ; git clone git@github.com:jpmaloney/basic.git

---

Scheme for supporting multiple versions of Boost and Boost.Build

Motivation:
* We want to choose one of several versions of Boost to use.
* We want to choose one of several versions of Boost.Build to use.
* We may want to mix and match versions of Boost and Boost.Build.

Directory structure:

;; Assume that our Boost stuff lives in this directory:
~/thirdparty/

;; We soft-link boost and boost_build to the desired versions
;; of Boost and Boost.Build.
;; The boost directory contains directories like boost, doc, libs, and tools.
;; The boost_build directory contains directories like ....
~/thirdparty/boost/ ->       ~/thirdparty/boost_versions/boost_1_40_0
~/thirdparty/boost_build/ -> ~/thirdparty/boost_versions/boost_1_40_0_boost_build

;; The concrete Boost and Boost.Build files live in this directory:
~/thirdparty/boost_versions/

;; For example:
~/thirdparty/boost_versions/boost_1_40_0/
~/thirdparty/boost_versions/boost_1_40_0_boost_build/
~/thirdparty/boost_versions/boost_1_49_0/
~/thirdparty/boost_versions/boost_1_49_0_boost_build/
~/thirdparty/boost_versions/boost_1_50_0/
~/thirdparty/boost_versions/boost_1_50_0_boost_build/

To change the preferred version of Boost:

To change the preferred version of Boost.Build:


---

Getting started with Boost 1.40.0 C++ libraries with G++ 4.7

Note: I am having problems getting Boost 1.40.0 and G++ 4.7 to work together.
If you have G++ 4.7, consider using a more recent version of Boost.

Install some packages:
Library               DebPackage
-------               ----------
bzip2                 libbz2-dev
python-dev            python-dev

Download the Boost C++ libraries:
$ cd ~
$ mkdir -p ~/thirdparty/boost_versions ; cd ~/thirdparty/boost_versions
$ wget http://downloads.sourceforge.net/project/boost/boost/1.40.0/boost_1_40_0.tar.bz2
$ tar -xvf boost_1_40_0.tar.bz2

Make a symbolic link to the Boost C++ libraries:
$ cd ~/thirdparty
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0 ~/thirdparty/boost

Verify that Boost header files are usable (after "git clone" above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example.cpp -o boost_example
$ echo 1 2 3 | ./boost_example

Build bjam:
;; This creates the file ~/thirdparty/boost_versions/boost_1_40_0/bjam.
$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ ./bootstrap.sh

Make a symbolic link to bjam:
$ cd ~/thirdparty/boost_versions
;; There is some fancy footwork to ensure that bjam can be found
;; in the directory ~/thirdparty/boost_build/bin.
$ mkdir -p boost_1_40_0_boost_build/bin
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0/bjam \
  ~/thirdparty/boost_versions/boost_1_40_0_boost_build/bin/bjam
$ ln -s ~/thirdparty/boost_versions/boost_1_40_0_boost_build ~/thirdparty/boost_build

Add bjam to the PATH env var:
$ vim ~/.bashrc
;; Add this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/thirdparty/boost_build/bin
;; Reload .bashrc:
$ source ~/.bashrc

Setup Boost.Build:
$ cp ~/basic/user-config.jam.orig ~/user-config.jam
;; Tweak ~/user-config.jam as needed.

Apply patch to support G++ 4.7.
;; Reference: https://svn.boost.org/trac/boost/ticket/6165
;; Download the following patch in the "original format" to
;; the directory ~/thirdparty/boost_versions/boost_1_40_0:
;; https://svn.boost.org/trac/boost/attachment/ticket/6165/libstdcpp3.hpp.patch
$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ patch ./boost/config/stdlib/libstdcpp3.hpp ./libstdcpp3.hpp.patch

Build custom binaries:
;; Note: Must use ${HOME} rather than ~.
#$ cd ~/thirdparty/boost_versions/boost_1_40_0
#$ ./bjam install --prefix=${HOME}/thirdparty/boost_versions/boost_1_40_0_boost_build

$ cd ~/thirdparty/boost_versions/boost_1_40_0
$ bjam toolset=gcc stage

Verify that Boost binary libraries are usable (after "git clone" and "bjam ..." above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example_lib.cpp -o boost_example_lib \
~/thirdparty/boost/stage/lib/libboost_regex.a
$ ./boost_example_lib


===============================================================================
2012-08-21 Tue


Updated instructions on building clang/LLVM.

===============================================================================
2012-07-14 Sat


Boost C++ libraries

Instructions verified on:
  * Linux Mint 12 Intel64/AMD64
  * gcc 4.6.1

Install some packages:
Library               DebPackage
-------               ----------
bzip2                 libbz2-dev
python-dev            python-dev

Check for presence of packages:
(Debian)
$ dpkg --get-selections | grep bzip2
$ dpkg --get-selections | grep python-dev

Download the Boost C++ libraries:
$ cd ~
$ mkdir -p ~/thirdparty/boost_versions ; cd ~/thirdparty/boost_versions
$ wget http://downloads.sourceforge.net/project/boost/boost/1.50.0/boost_1_50_0.tar.bz2
$ tar -xvf boost_1_50_0.tar.bz2

Make a symbolic link to the Boost C++ libraries:
$ cd ~/thirdparty
$ ln -sfnv ~/thirdparty/boost_versions/boost_1_50_0 ~/thirdparty/boost

Verify that Boost header files are usable (after "git clone" above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example.cpp -o boost_example
$ echo 1 2 3 | ./boost_example

Build the b2 (aka bjam) Boost.Build application:
$ cd ~/thirdparty/boost_versions/boost_1_50_0/tools/build/v2
$ ./bootstrap.sh
;; Note: Must use ${HOME} rather than ~.
$ ./b2 install --prefix=${HOME}/thirdparty/boost_versions/boost_1_50_0_boost_build
$ ln -sfnv ~/thirdparty/boost_versions/boost_1_50_0_boost_build ~/thirdparty/boost_build
;; Add b2 and bjam to the PATH env var:
$ vim ~/.bashrc
;; Add this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/thirdparty/boost_build/bin

Build the Boost binary libraries:
;; Note: My already-existing ~/user-config.jam file interferes with this step,
;; so I temporarily rename it.
$ mv ~/user-config.jam ~/user-config.jam.save    ;; Save my ~/user-config.jam.
$ cd ~/thirdparty/boost_versions/boost_1_50_0
$ b2 toolset=gcc stage
;; If clang++ is on the PATH, you can try this:
$ b2 toolset=clang stage
$ mv ~/user-config.jam.save ~/user-config.jam    ;; Restore my ~/user-config.jam.

Verify that Boost binary libraries are usable (after "git clone" and "b2 ..." above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example_lib.cpp -o boost_example_lib \
~/thirdparty/boost/stage/lib/libboost_regex.a
$ ./boost_example_lib

Setup Boost.Build:
$ ln -sf ~/basic/user-config.jam ~/user-config.jam
===============================================================================

2012-04-04 Wed
References:
http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging-Options

$ gcc -print-file-name=libc
$ gcc -print-search-dirs
$ gcc -print-sysroot
$ gcc -print-sysroot-headers-suffix
$ gcc -dumpmachine
$ gcc -dumpversion
$ gcc -dumpspecs

---

References:
http://projects.gnome.org/nemiver/

$ mkdir -p ~/thirdparty/nemiver ; cd ~/thirdparty/nemiver
$ git clone git://git.gnome.org/nemiver nemiver.git

---

References:
http://www.zero-bugs.com/2.0/product_intro.html
http://zerobugs.codeplex.com/
http://zerobugs.codeplex.com/documentation

$ sudo apt-get install flex gtkmm-2.4 libatomic-ops-dev libelf-dev libgtksourceview2.0-dev
$ export BOOST_ROOT=~/thirdparty/boost
$ mkdir -p ~/thirdparty/zerobugs ; cd ~/thirdparty/zerobugs
;; Download zerobugs-NNNNN.zip from codeplex.com.
$ mv ~/Downloads/zerobugs-NNNNN.zip .
$ unzip zerobugs-NNNNN.zip
$ chmod +x ./build
$ ./build --help
$ ./build

===============================================================================

2012-03-22 Thu
PC-BSD 9: Set up ports:
References:
http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/ports-using.html

First time only:
# cd /var/db/portsnap
# portsnap fetch
# portsnap extract

Thereafter:
# portsnap update

---

PC-BSD 9: Use newer version of GCC and binutils:
References:
http://www.freebsd.org/doc/en/articles/custom-gcc/article.html

# cd /usr/ports/devel/binutils && make install
   no   NLS
   YES  LIBSIGSEVG
# cd /usr/ports/lang/gcc47 && make install

---

PC-BSD 9: Install git:
# echo /usr/ports/*/*git*
# cd /usr/ports/devel/git ; make install

See notes in 2012-03-14 below for configuration of git and GitHub.

---

See notes in 2012-03-14 below for configuration of vim.

---

# echo /usr/ports/*/*subversion*
# cd /usr/ports/devel/subversion ; make install

---

PC-BSD 9: Install grin:
# cd /usr/ports/devel/py-setuptools ; make install
# easy-install ;; This doesn't work.  What else?

---

PC-BSD 9: Install Valgrind:
# cd /usr/ports/devel/valgrind; make install
;; Fails due to problematic dependencies.

---

PC-BSD 9: Install Boost C++ libraries:

===============================================================================

2012-03-14 Wed
$ dpkg --get-selections
$ dpkg -s <packagename>  ;; Info about installed package.

Application           DebPackage           PortsName
                                           /usr/ports/
-----------           ----------           ---------
a2ps                  a2ps                 (pre-installed)
git                   git-core             devel/git
                      git-gui
                      git-doc
gvim                  vim-gnome            (pre-installed)
gcc                   gcc                  lang/gcc[##]
g++                   g++                  (part of lang/gcc[##])
ddd                   ddd
nemiver               nemiver
grin                                       devel/py-setuptools
Exuberant C-tags      exuberant-ctags
Font Manager (gnome)  font-manager
gnuplot               gnuplot
graphviz              graphviz
Erlang                erlang-base
Firefox               firefox
Subversion            subversion           devel/subversion
Mercurial             mercurial
tree                  tree                 sysutils/tree
valgrind              valgrind             devel/valgrind

---
$ sudo apt-get install console-terminus ttf-dejavu ttf-droid ttf-inconsolata xfonts-terminus
---

Git setup:
$ sudo apt-get install git-core git-gui git-doc
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@youremail.com"

Configure git for GitHub:
$ git config --global github.user <github_username>
$ git config --global github.token <github_token> ;; See GitHub->AccountSettings.

Configure GitHub for us:
$ ssh-keygen -t rsa -C "your_email@youremail.com"
o  Enter your passphrase.
o  Add to GitHub.com (see https://github.com/settings/ssh).
o  $ ssh-add

Clone our repo:
$ git clone git@github.com:jpmaloney/basic.git

---

Vim config (after "git clone" above):
$ ln -s ~/basic/vimrc ~/.vimrc

---

Install grin:
Reference: http://pypi.python.org/pypi/grin
$ sudo apt-get install python-setuptools
$ sudo easy-install grin

---

Boost C++ libraries

Install some packages:
Library               DebPackage
-------               ----------
bzip2                 libbz2-dev
python-dev            python-dev

Download the Boost C++ libraries:
$ cd ~
$ mkdir -p ~/thirdparty/boost_versions ; cd ~/thirdparty/boost_versions
$ wget http://downloads.sourceforge.net/project/boost/boost/1.49.0/boost_1_49_0.tar.bz2
$ tar -xvf boost_1_49_0.tar.bz2

Make a symbolic link to the Boost C++ libraries:
$ cd ~/thirdparty
$ ln -s ~/thirdparty/boost_versions/boost_1_49_0 ~/thirdparty/boost

Verify that Boost header files are usable (after "git clone" above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example.cpp -o boost_example
$ echo 1 2 3 | ./boost_example

Build custom binaries:
$ cd ~/thirdparty/boost_versions/boost_1_49_0/tools/build/v2
$ ./bootstrap.sh
;; Note: Must use ${HOME} rather than ~.
$ ./b2 install --prefix=${HOME}/thirdparty/boost_versions/boost_1_49_0_boost_build
$ ln -s ~/thirdparty/boost_versions/boost_1_49_0_boost_build ~/thirdparty/boost_build
;; Add b2 and bjam to the PATH env var:
$ vim ~/.bashrc
;; Add this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/thirdparty/boost_build/bin

$ cd ~/thirdparty/boost_versions/boost_1_49_0
$ b2 toolset=gcc stage

Verify that Boost binary libraries are usable (after "git clone" and "b2 ..." above):
$ cd ~/basic/tests
$ g++ -I ~/thirdparty/boost boost_example_lib.cpp -o boost_example_lib \
~/thirdparty/boost/stage/lib/libboost_regex.a
$ ./boost_example_lib

Setup Boost.Build:
$ ln -sf ~/basic/user-config.jam ~/user-config.jam

---

Get and build LLVM/clang on Linux:

LLVM:
$ mkdir ~/llvm ; cd ~/llvm
$ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm

clang:
$ cd ~/llvm/llvm/tools
$ svn co http://llvm.org/svn/llvm-project/cfe/trunk clang

clang tools:
$ cd ~/llvm/llvm/tools/clang/tools
$ svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra

compiler-rt:
$ cd ~/llvm/llvm/projects
$ svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt

libc++abi:
$ cd ~/llvm/llvm/tools
$ svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi

libc++ (must be after libc++abi?):
$ cd ~/llvm/llvm/tools
$ svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx

Create symbolic links to libc++ headers and binaries:
$ sudo ln -sf ~/llvm/llvm/tools/libcxx/include /usr/include/c++/v1
$ sudo ln -sf ~/llvm/llvm/tools/libcxxabi/include/cxxabi.h /usr/include/c++/v1/cxxabi.h
$ cd ~/llvm/llvm/tools/libcxx/lib
$ ./buildit    ;; This builds ~/llvm/llvm/tools/libcxx/lib/libc++.so.1.0
               ;; Note: On FreeBSD, ./buildit is not ready for prime time:
               ;; http://permalink.gmane.org/gmane.comp.compilers.clang.devel/19493
$ sudo ln -sf ~/llvm/llvm/tools/libcxx/lib/libc++.so.1.0 /usr/lib/libc++.so.1.0
$ sudo ln -sf /usr/lib/libc++.so.1.0 /usr/lib/libc++.so.1
$ sudo ln -sf /usr/lib/libc++.so.1 /usr/lib/libc++.so

Configure and build (first time only):
$ cd ~/llvm
$ mkdir build ; cd build
$ ../llvm/configure --enable-optimized
$ make -j4  ;; -j4 means "use 4 jobs".  Use 'gmake' on FreeBSD.
;; Add LLVM/clang to PATH env var:
$ vim ~/.bashrc
;; Linux: Add this line to ~/.bashrc:
export PATH=${PATH}:${HOME}/llvm/build/Release+Asserts/bin

Configure and build (thereafter):
$ cd ~/llvm/build
$ make update  ;; Use 'gmake' on FreeBSD.
$ make -j4     ;; Use 'gmake' on FreeBSD.

Run clang:
$ cd ~/basic
;;$ clang++ -std=c++0x -stdlib=libc++ hello.cpp
$ clang++ -std=c++0x -stdlib=libc++ hello.cpp -lstdc++

---

Chrome                ???

---

Typesafe Stack

---

===============================================================================

2012-03-13 Tue
Create this git repository.

===============================================================================

#
# end
#

